openapi: 3.0.3
info:
  title: Swagger hotel reservation - OpenAPI 3.0
  description: |-
    This is a sample Book Store Server based on the OpenAPI 3.0 specification. 
    
    Useful link:
    - [The Books Store repository](https://github.com/ayayabass/pplabs4_10)
  version: 1.0.11
servers:
    - url: http://127.0.0.1:5000/
paths:
  /book:
    post:
      tags:
        - book
      summary: Add a new book to the store
      description: Add a new book to the store
      operationId: addBook
      requestBody:
        description: Create a new book in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
          application/xml:
            schema:
              $ref: '#/components/schemas/Book'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Book'
        '405':
          description: Invalid input
      security:
        - bookstore_auth:
            - write:books
            - read:books
    put:
      tags:
        - book
      summary: Update an existing book
      description: Update an existing book by Id
      operationId: updateBook
      requestBody:
        description: Update an existent book in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
          application/xml:
            schema:
              $ref: '#/components/schemas/Book'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid ID supplied
        '404':
          description: Book not found
        '405':
          description: Validation exception
      security:
        - bookstore_auth:
            - write:books
            - read:books  
  /books:
    get:
      summary: get all books
      tags:
        - books
      operationId: getAllBooks
      responses:
        '200':
          description: successfull response 
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Books"
        '404':
          description: Books not found
      security:
        - bookstore_auth:
            - write:books
            - read:books  
      
  /books/findByStatus:
    get:
      tags:
        - books
      summary: Finds Books by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findBooksByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - expected
              - sold
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          description: Invalid status value
      security:
        - bookstore_auth:
            - write:books
            - read:books
  /books/findByGenre:
    get:
      tags:
        - books
      summary: Finds Books by Genre
      description: ''
      operationId: findBooksByGenre
      parameters:
        - name: genre
          in: query
          description: Genre values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          description: Invalid status value
      security:
        - bookstore_auth:
            - write:books
            - read:books
  /books/{author}:
    get:
      tags:
        - books
      summary: Find books by author
      description: Returns all author's books
      operationId: getBooksByAuthor
      parameters:
        - name: author
          in: path
          description: authorName of book to return
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          description: Invalid authorName supplied
        '404':
          description: Books not found
      security:
        - bookstore_auth:
            - write:books
            - read:books
  /books/{bookName}:
    get:
      tags:
        - books
      summary: Find book by Name
      description: Returns a single book
      operationId: getBookByName
      parameters:
        - name: bookName
          in: path
          description: Name of book to return
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid Name supplied
        '404':
          description: Book not found
      security:
        - bookstore_auth:
            - write:books
            - read:books
  /book/{bookId}:
    get:
      tags:
        - book
      summary: Find book by ID
      description: Returns a single book
      operationId: getBookById
      parameters:
        - name: bookId
          in: path
          description: ID of book to return
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid ID supplied
        '404':
          description: Book not found
      security:
        - bookstore_auth:
            - write:books
            - read:books
    delete:
      tags:
        - book
      summary: Deletes a book
      description: delete a book
      operationId: deleteBook
      parameters:
        - name: bookId
          in: path
          description: Book id to delete
          required: true
          schema:
            type: integer
      responses:
        '400':
          description: Invalid book value
      security:
        - bookstore_auth:
            - write:books
            - read:books
  /admin:
    get:
      tags:
        - admin
      summary: "Logs admin"
      operationId: loginAdmin
      parameters:
        - name: "username"
          in: "query"
          description: "The user name for login"
          required: true
          schema:
            type: "string"
        - name: "password"
          in: "query"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: successful operation
        "404":
          description: "Invalid username or password"

  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  
                
components:
  schemas:
    Genre:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: fantasy
      xml:
        name: genre
    Author:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Roman
      xml:
        name: autor
    Book:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          example: 10
        name:
          type: string
          example: ""
        price:
          type: integer
          example: 150 
        genre:
          $ref: '#/components/schemas/Genre'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        author:
          type: array
          items:
            $ref: '#/components/schemas/Author'
        description:
          type: string
          example: This book about ...
        status:
          type: string
          description: book status in the store
          enum:
            - available
            - pending
            - sold
    Books:
      type: array
      items:
        $ref: "#/components/schemas/Book"
    Admin:
      type: object
      required:
        - full_name
        - username
        - password
      properties:
        full_name:
          type: string
          example: Joh Green
        username:
          type: string
          example: greep
        password:
          type: string
          example: 12345678
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '1234578787'
        phone:
          type: string
          example: '+380980654785'
      xml:
        name: user
  securitySchemes:
    bookstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://bookstore3.swagger.io/oauth/authorize
          scopes:
            write:books: modify books in your account
            read:books: read your books

